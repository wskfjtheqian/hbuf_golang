// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v6.30.2
// source: proto_test.proto

package hbuf_test

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SubStruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueInt      int32                  `protobuf:"varint,1,opt,name=ValueInt,proto3" json:"ValueInt,omitempty"`
	ValueInt8     int32                  `protobuf:"varint,2,opt,name=ValueInt8,proto3" json:"ValueInt8,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubStruct) Reset() {
	*x = SubStruct{}
	mi := &file_proto_test_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubStruct) ProtoMessage() {}

func (x *SubStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubStruct.ProtoReflect.Descriptor instead.
func (*SubStruct) Descriptor() ([]byte, []int) {
	return file_proto_test_proto_rawDescGZIP(), []int{0}
}

func (x *SubStruct) GetValueInt() int32 {
	if x != nil {
		return x.ValueInt
	}
	return 0
}

func (x *SubStruct) GetValueInt8() int32 {
	if x != nil {
		return x.ValueInt8
	}
	return 0
}

type TestStruct struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ValueInt      int32                  `protobuf:"varint,1,opt,name=ValueInt,proto3" json:"ValueInt,omitempty"`
	ValueInt8     int32                  `protobuf:"varint,2,opt,name=ValueInt8,proto3" json:"ValueInt8,omitempty"`
	ValueInt16    int32                  `protobuf:"varint,3,opt,name=ValueInt16,proto3" json:"ValueInt16,omitempty"`
	ValueInt32    int32                  `protobuf:"varint,4,opt,name=ValueInt32,proto3" json:"ValueInt32,omitempty"`
	ValueInt64    int64                  `protobuf:"varint,5,opt,name=ValueInt64,proto3" json:"ValueInt64,omitempty"`
	ValueUint     uint32                 `protobuf:"varint,6,opt,name=ValueUint,proto3" json:"ValueUint,omitempty"`
	ValueUint8    uint32                 `protobuf:"varint,7,opt,name=ValueUint8,proto3" json:"ValueUint8,omitempty"`
	ValueUint16   uint32                 `protobuf:"varint,8,opt,name=ValueUint16,proto3" json:"ValueUint16,omitempty"`
	ValueUint32   uint32                 `protobuf:"varint,9,opt,name=ValueUint32,proto3" json:"ValueUint32,omitempty"`
	ValueUint64   uint64                 `protobuf:"varint,10,opt,name=ValueUint64,proto3" json:"ValueUint64,omitempty"`
	ValueFloat32  float32                `protobuf:"fixed32,11,opt,name=ValueFloat32,proto3" json:"ValueFloat32,omitempty"`
	ValueFloat64  float64                `protobuf:"fixed64,12,opt,name=ValueFloat64,proto3" json:"ValueFloat64,omitempty"`
	ValueString   string                 `protobuf:"bytes,13,opt,name=ValueString,proto3" json:"ValueString,omitempty"`
	ValueBytes    []byte                 `protobuf:"bytes,14,opt,name=ValueBytes,proto3" json:"ValueBytes,omitempty"`
	ValueBool     bool                   `protobuf:"varint,15,opt,name=ValueBool,proto3" json:"ValueBool,omitempty"`
	ValueData     *SubStruct             `protobuf:"bytes,16,opt,name=ValueData,proto3" json:"ValueData,omitempty"`
	ValueListInt  []int32                `protobuf:"varint,17,rep,packed,name=ValueListInt,proto3" json:"ValueListInt,omitempty"`
	ValueListStr  []string               `protobuf:"bytes,18,rep,name=ValueListStr,proto3" json:"ValueListStr,omitempty"`
	ValueMapInt   map[int32]int32        `protobuf:"bytes,19,rep,name=ValueMapInt,proto3" json:"ValueMapInt,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	ValueMapStr   map[string]string      `protobuf:"bytes,20,rep,name=ValueMapStr,proto3" json:"ValueMapStr,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TestStruct) Reset() {
	*x = TestStruct{}
	mi := &file_proto_test_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TestStruct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestStruct) ProtoMessage() {}

func (x *TestStruct) ProtoReflect() protoreflect.Message {
	mi := &file_proto_test_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestStruct.ProtoReflect.Descriptor instead.
func (*TestStruct) Descriptor() ([]byte, []int) {
	return file_proto_test_proto_rawDescGZIP(), []int{1}
}

func (x *TestStruct) GetValueInt() int32 {
	if x != nil {
		return x.ValueInt
	}
	return 0
}

func (x *TestStruct) GetValueInt8() int32 {
	if x != nil {
		return x.ValueInt8
	}
	return 0
}

func (x *TestStruct) GetValueInt16() int32 {
	if x != nil {
		return x.ValueInt16
	}
	return 0
}

func (x *TestStruct) GetValueInt32() int32 {
	if x != nil {
		return x.ValueInt32
	}
	return 0
}

func (x *TestStruct) GetValueInt64() int64 {
	if x != nil {
		return x.ValueInt64
	}
	return 0
}

func (x *TestStruct) GetValueUint() uint32 {
	if x != nil {
		return x.ValueUint
	}
	return 0
}

func (x *TestStruct) GetValueUint8() uint32 {
	if x != nil {
		return x.ValueUint8
	}
	return 0
}

func (x *TestStruct) GetValueUint16() uint32 {
	if x != nil {
		return x.ValueUint16
	}
	return 0
}

func (x *TestStruct) GetValueUint32() uint32 {
	if x != nil {
		return x.ValueUint32
	}
	return 0
}

func (x *TestStruct) GetValueUint64() uint64 {
	if x != nil {
		return x.ValueUint64
	}
	return 0
}

func (x *TestStruct) GetValueFloat32() float32 {
	if x != nil {
		return x.ValueFloat32
	}
	return 0
}

func (x *TestStruct) GetValueFloat64() float64 {
	if x != nil {
		return x.ValueFloat64
	}
	return 0
}

func (x *TestStruct) GetValueString() string {
	if x != nil {
		return x.ValueString
	}
	return ""
}

func (x *TestStruct) GetValueBytes() []byte {
	if x != nil {
		return x.ValueBytes
	}
	return nil
}

func (x *TestStruct) GetValueBool() bool {
	if x != nil {
		return x.ValueBool
	}
	return false
}

func (x *TestStruct) GetValueData() *SubStruct {
	if x != nil {
		return x.ValueData
	}
	return nil
}

func (x *TestStruct) GetValueListInt() []int32 {
	if x != nil {
		return x.ValueListInt
	}
	return nil
}

func (x *TestStruct) GetValueListStr() []string {
	if x != nil {
		return x.ValueListStr
	}
	return nil
}

func (x *TestStruct) GetValueMapInt() map[int32]int32 {
	if x != nil {
		return x.ValueMapInt
	}
	return nil
}

func (x *TestStruct) GetValueMapStr() map[string]string {
	if x != nil {
		return x.ValueMapStr
	}
	return nil
}

var File_proto_test_proto protoreflect.FileDescriptor

const file_proto_test_proto_rawDesc = "" +
	"\n" +
	"\x10proto_test.proto\x12\thbuf.test\"E\n" +
	"\tsubStruct\x12\x1a\n" +
	"\bValueInt\x18\x01 \x01(\x05R\bValueInt\x12\x1c\n" +
	"\tValueInt8\x18\x02 \x01(\x05R\tValueInt8\"\x82\a\n" +
	"\n" +
	"testStruct\x12\x1a\n" +
	"\bValueInt\x18\x01 \x01(\x05R\bValueInt\x12\x1c\n" +
	"\tValueInt8\x18\x02 \x01(\x05R\tValueInt8\x12\x1e\n" +
	"\n" +
	"ValueInt16\x18\x03 \x01(\x05R\n" +
	"ValueInt16\x12\x1e\n" +
	"\n" +
	"ValueInt32\x18\x04 \x01(\x05R\n" +
	"ValueInt32\x12\x1e\n" +
	"\n" +
	"ValueInt64\x18\x05 \x01(\x03R\n" +
	"ValueInt64\x12\x1c\n" +
	"\tValueUint\x18\x06 \x01(\rR\tValueUint\x12\x1e\n" +
	"\n" +
	"ValueUint8\x18\a \x01(\rR\n" +
	"ValueUint8\x12 \n" +
	"\vValueUint16\x18\b \x01(\rR\vValueUint16\x12 \n" +
	"\vValueUint32\x18\t \x01(\rR\vValueUint32\x12 \n" +
	"\vValueUint64\x18\n" +
	" \x01(\x04R\vValueUint64\x12\"\n" +
	"\fValueFloat32\x18\v \x01(\x02R\fValueFloat32\x12\"\n" +
	"\fValueFloat64\x18\f \x01(\x01R\fValueFloat64\x12 \n" +
	"\vValueString\x18\r \x01(\tR\vValueString\x12\x1e\n" +
	"\n" +
	"ValueBytes\x18\x0e \x01(\fR\n" +
	"ValueBytes\x12\x1c\n" +
	"\tValueBool\x18\x0f \x01(\bR\tValueBool\x122\n" +
	"\tValueData\x18\x10 \x01(\v2\x14.hbuf.test.subStructR\tValueData\x12\"\n" +
	"\fValueListInt\x18\x11 \x03(\x05R\fValueListInt\x12\"\n" +
	"\fValueListStr\x18\x12 \x03(\tR\fValueListStr\x12H\n" +
	"\vValueMapInt\x18\x13 \x03(\v2&.hbuf.test.testStruct.ValueMapIntEntryR\vValueMapInt\x12H\n" +
	"\vValueMapStr\x18\x14 \x03(\v2&.hbuf.test.testStruct.ValueMapStrEntryR\vValueMapStr\x1a>\n" +
	"\x10ValueMapIntEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\x05R\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\x05R\x05value:\x028\x01\x1a>\n" +
	"\x10ValueMapStrEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01B\rZ\v.;hbuf_testb\x06proto3"

var (
	file_proto_test_proto_rawDescOnce sync.Once
	file_proto_test_proto_rawDescData []byte
)

func file_proto_test_proto_rawDescGZIP() []byte {
	file_proto_test_proto_rawDescOnce.Do(func() {
		file_proto_test_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_test_proto_rawDesc), len(file_proto_test_proto_rawDesc)))
	})
	return file_proto_test_proto_rawDescData
}

var file_proto_test_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_proto_test_proto_goTypes = []any{
	(*SubStruct)(nil),  // 0: hbuf.test.subStruct
	(*TestStruct)(nil), // 1: hbuf.test.testStruct
	nil,                // 2: hbuf.test.testStruct.ValueMapIntEntry
	nil,                // 3: hbuf.test.testStruct.ValueMapStrEntry
}
var file_proto_test_proto_depIdxs = []int32{
	0, // 0: hbuf.test.testStruct.ValueData:type_name -> hbuf.test.subStruct
	2, // 1: hbuf.test.testStruct.ValueMapInt:type_name -> hbuf.test.testStruct.ValueMapIntEntry
	3, // 2: hbuf.test.testStruct.ValueMapStr:type_name -> hbuf.test.testStruct.ValueMapStrEntry
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_test_proto_init() }
func file_proto_test_proto_init() {
	if File_proto_test_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_test_proto_rawDesc), len(file_proto_test_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_test_proto_goTypes,
		DependencyIndexes: file_proto_test_proto_depIdxs,
		MessageInfos:      file_proto_test_proto_msgTypes,
	}.Build()
	File_proto_test_proto = out.File
	file_proto_test_proto_goTypes = nil
	file_proto_test_proto_depIdxs = nil
}
